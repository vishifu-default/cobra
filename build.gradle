/*
 * This file was generated by the Gradle 'init' task.
 *
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'org.springframework.boot' version '3.4.1'
    id 'io.spring.dependency-management' version '1.1.7'
}

repositories {
    mavenLocal()
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
}

dependencies {
    implementation libs.com.esotericsoftware.kryo
    implementation libs.io.netty.netty.all
    implementation libs.redis.client.jedis
    implementation libs.org.slf4j.slf4j.api
    implementation libs.org.jetbrains.annotations
    testImplementation libs.org.junit.jupiter.junit.jupiter.engine
    testImplementation libs.org.junit.platform.junit.platform.runner
    testImplementation libs.org.mockito.mockito.core

    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    // https://mvnrepository.com/artifact/org.apache.poi/poi
    implementation 'org.apache.poi:poi:5.3.0'
    // https://mvnrepository.com/artifact/org.apache.poi/poi-ooxml
    implementation 'org.apache.poi:poi-ooxml:5.3.0'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

group = 'org.cobra'
version = 'consumer.1.0'
description = 'cobra'
java.sourceCompatibility = JavaVersion.VERSION_21

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

jar {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
}

bootJar {
}

test {
    maxParallelForks = 3
    useJUnitPlatform()
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs += "--add-exports=java.base/sun.nio.ch=ALL-UNNAMED"
}

tasks.withType(Test).configureEach {
    jvmArgs += "--add-exports=java.base/sun.nio.ch=ALL-UNNAMED"
}

tasks.withType(JavaExec).configureEach {
    jvmArgs += "--add-exports=java.base/sun.nio.ch=ALL-UNNAMED"
}

tasks.withType(Javadoc).configureEach {
    options.encoding = 'UTF-8'
}
